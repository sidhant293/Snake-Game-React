{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snake","snakeDots","map","dot","i","style","left","top","className","key","Food","food","generateRandom","Math","floor","random","App","checkBounds","head","state","length","gameOver","checkSelfTouch","pop","forEach","alert","setState","direction","speed","score","moveSnake","dots","push","shift","keyPress","event","keyCode","enlarge","unshift","eatFood","sc","sp","this","setInterval","document","onkeydown","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea655268.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Snake.css';\r\n\r\nconst Snake=(props)=>{\r\n    const snake=props.snakeDots.map((dot,i)=>{\r\n        const style={\r\n            left:`${dot[0]}%`,\r\n            top:`${dot[1]}%`\r\n        }\r\n        return <div className='snake-dot' key={i} style={style}></div>\r\n    });\r\n    return(\r\n    <div>{snake}</div>\r\n    );\r\n}\r\nexport default Snake;","import React from 'react';\r\nimport './Food.css';\r\n\r\nconst Food=(props)=>{\r\n    const style={\r\n        left:`${props.food[0]}%`,\r\n        top:`${props.food[1]}%`\r\n    }\r\n    return(<div className='food-dot' style={style}></div>\r\n    );   \r\n}\r\nexport default Food;","import React from 'react';\nimport './App.css';\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst generateRandom = () => {\n  const min = 1, max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n}\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      snakeDots: [\n        [0, 0],\n        [2, 0]\n      ],\n      food: generateRandom(),\n      direction: 'RIGHT',\n      speed: 200,\n      score:0\n    }\n  }\n\n  checkBounds = () => {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[0] < 0 || head[1] >= 100 || head[1] < 0) this.gameOver();\n  }\n\n  checkSelfTouch = () => {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) this.gameOver();\n    })\n  }\n\n  gameOver = () => {\n    alert(\"GAME OVER\");\n    this.setState({\n      snakeDots: [\n        [0, 0],\n        [2, 0]\n      ],\n      food: generateRandom(),\n      direction: 'RIGHT',\n      speed: 200,\n      score:0\n    });\n  }\n\n  moveSnake = () => {\n    let dots = this.state.snakeDots;\n    let head = dots[dots.length - 1];\n    switch (this.state.direction) {\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({ snakeDots: dots });\n  }\n\n  keyPress = (event) => {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({ direction: 'LEFT' });\n        break;\n      case 38:\n        this.setState({ direction: 'UP' });\n        break;\n      case 39:\n        this.setState({ direction: 'RIGHT' });\n        break;\n      case 40:\n        this.setState({ direction: 'DOWN' });\n        break;\n      default: alert(\"Use arrow keys to move snake\");\n    }\n  }\n\n  enlarge = () => {\n    let snake = [...this.state.snakeDots];\n    snake.unshift([]);\n    this.setState({ snakeDots: snake });\n  }\n\n  eatFood = () => {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] === this.state.food[0] && head[1] === this.state.food[1]) {\n      this.setState({ food: generateRandom() });\n      let sc=this.state.score;\n      sc=sc+10;\n      this.setState({ score: sc });\n      let sp=this.state.speed;\n      if(sp>10) sp=sp-10;\n      this.setState({ speed: sp });\n      this.enlarge();\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkBounds();\n    this.checkSelfTouch();\n    this.eatFood();\n  }\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.keyPress;\n  }\n\n  render() {\n    return (<div>\n      <h1 className='f-4 tc'>Snake Game</h1>\n      <h1 className='f5 tc'>Score:{this.state.score}</h1>\n      <div className='game-area'>\n        <Snake snakeDots={this.state.snakeDots} />\n        <Food food={this.state.food} />\n      </div>\n    </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}